import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import _ from "lodash-es";
import { Command } from "../../ai/command-processor";
import { AppState } from "../store";

// import { fetchCount } from './commentAPI'

export enum CommentState {
  RawInput,
  Detected,
  Rendered,
}

export interface Comment {
  id: string;
  x: number;
  y: number;
  rawText: string;
  command?: Command;
  state: CommentState;
  //   isOpen: boolean
}

export interface CommentsState {
  byId: Record<string, Comment>;
  openComment: null | string;
}

const initialState: CommentsState = {
  openComment: null,
  byId: {
    "comment-001": {
      id: "comment-001",
      x: 0.2,
      y: 0.4,
      rawText: "replace text with pelooo",
      state: CommentState.RawInput,
      //   isOpen: true
    },
    "comment-002": {
      id: "comment-002",
      x: 0.5,
      y: 0.8,
      rawText: "222 replace text with pelooo",
      state: CommentState.RawInput,
      // isOpen: false
    },
  },
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
const fetchUserById = createAsyncThunk(
    'users/fetchByIdStatus',
    async (userId: number, thunkAPI) => {
      const response = await userAPI.fetchById(userId)
      return response.data
    }
  )

export const commentsSlice = createSlice({
  name: "comment",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    addComment: (state, action: PayloadAction<Comment>) => {
      state.byId = { ...state.byId, [action.payload.id]: action.payload };
      state.openComment = action.payload.id;
    },
    updateComment: (state, action: PayloadAction<Partial<Comment>>) => {
      if (!action.payload.id) return;

      state.byId[action.payload.id] = {
        ...state.byId[action.payload.id],
        ...action.payload,
      };
    },
    openComment: (state, action: PayloadAction<string>) => {
      state.openComment = action.payload;
    },
    closeComment: (state) => {
      if (state.openComment === null) {
        return;
      }

      const comment = state.byId[state.openComment];

      if (!comment) {
        return
      }

      if (comment.rawText === "" || comment.rawText === null) {
        state.byId = _.omit(state.byId, comment.id);
      }

      state.openComment = null;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  //   extraReducers: (builder) => {
  //     builder
  //       .addCase(incrementAsync.pending, (state) => {
  //         state.status = 'loading'
  //       })
  //       .addCase(incrementAsync.fulfilled, (state, action) => {
  //         state.status = 'idle'
  //         state.value += action.payload
  //       })
  //   },
});

export const { addComment, closeComment, openComment, updateComment } =
  commentsSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.comment.value)`
export const selectOpenComment = (state: AppState) =>
  state.comments.openComment;
export const selectComments = (state: AppState) =>
  Object.values(state.comments.byId);
export const selectCommentById = (id: string) => (state: AppState) =>
  state.comments.byId[id];

export default commentsSlice.reducer;
